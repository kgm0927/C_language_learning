#include <stdio.h>// 다음 예에서 char*형 포인터 변수 cp는 변수를 참조할 대 1바이트씩 참조하라고, int*형 포인터
int main() {	  // 변수 ip는 변수를 참조할 때마다 4바이트씩 주소를 참조하라고 알려주고 있다.
	char c = 'A';
	char* cp = NULL;	// 포인터 변수 선언

	cp = &c;			//  주소 저장


	printf("%x %c %c \n", &c, c, *&c);
	printf("%x %x %x %c \n", &cp, cp, *&cp, *cp);


	printf("%c \n", c);		// 직접 접근
	printf("%c \n", *cp);	// 간접 접근


	return 0;
}
//
// 
// 5행에서 char*형의 포인터 변수를 선언하고, 7행에서 포인터 변수 cp가 char형 변수 c의 주소
// &cp를 저장한다.
// 
//					c== *&c== *cp
// 
// 다음처럼 포인터 변수를 선언하는 동시에 주소를 저장할 수 있다.
// 
//					char*p=&c;
// 
// 
// 9, 10행에서 &c(변수 c의 주소,), c(메모리 공간,A), *&c(메모리 공간, A), 
//	&cp(변수 cp의 주소,), cp(메모리 공간,&c), *&cp(메모리 공간, &c)을 출력한다.
// 
// 12행과 변수 c의 값(A)을 직접 접근하여 출력한다. 
// 
// 13행에서 포인터 변수 cp는 &c(변수 c의 주소)를 저장하고 있으므로 *cp==*&c가 성립한다.
// 포인터 변수 cp는 변수 c의 값을 참조하는 간접 접근의 형태이다. 최종적으로 c, *&c, *cp
// 는 같은 메모리 공간을 나타낸다.			
// 
//