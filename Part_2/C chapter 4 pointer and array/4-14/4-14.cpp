#include <stdio.h>
int main(void)
{
	int array1[2][3] = { 10,20,30,40,50,60 };
	int* p = NULL;

	p = array1[0];	// p=&array[0][0]; // p=array[0]; 포인터 변수에 배열의 시작 주소를 저장. 현재 이차원 배열에서는 p=array가 통하지 않는다.

	printf("----------------- \n");
	printf("%x %x %x \n", &p[0], &p[1], &p[2]);// p+0, p+1, p+2
	printf("%x %x %x \n", &p[3], &p[4], &p[5]);// p+3, p+4, p+5


	printf("----------------- \n");
	printf("%d %d %d \n", p[0], p[1], p[2]);	// *(p+0), *(p+1), *(p+2)
	printf("%d %d %d \n", p[3], p[4], p[5]);	// *(p+3), *(p+4), *(p+5)
	return 0;
}

//
//
// 
// 포인터 변수를 통한 2차원 배열의 접근
// 
// 본격적으로 포인터 변수를 통해서 2차원 배열에 접근하는 방법을 알아본다.
// 포인터 변수에 2차원 배열의 시작 주소를 저장하는 방법이 있다.
// 
// 7행에서 1차원 포인터 변수 p에 array(2차원 배열의 시작 주소)를 저장한다.2차원
// 배열에서 p=array, p=&array[0][0], p=array[0]은 모두 같은 표현이다.
// 
// 14행과 15행에서 1차원 포인터 변수 p를 이용하여 2차원 배열에 저장된 값들에 접근한다.
// p[i]]==*(p+i)라는 사실을 설명하지 않아도 직관적으로 알 수 있다. *&p[i]에서 *&는 서로
// 상쇄되므로 *&p[i]==p[i]이 성립이 된다. 따라서 *(p+i)==*&p[i]==p[i]는 서로 같다.
//