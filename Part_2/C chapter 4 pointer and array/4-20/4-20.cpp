#include <stdio.h>
int main(void) {						// 포인터 배열의 의미는 주소를 저장하는 배열을 의미한다. 지금까지 배열에는 값을
										// 저장했지만, 포인터 배열에는 주소를 저장한다.
	int a = 10, b = 20, c = 30;
	int* ap[3] = { NULL,NULL,NULL };

	ap[0] = &a;
	ap[1] = &b;
	ap[2] = &c;


	printf("%x %x %x \n", ap[0], ap[1], ap[2]);
	printf("%x %x %x \n", ap[0], ap[1], ap[2]);
	printf("%x %x %x \n", *(ap + 0), *(ap + 1), *(ap + 2));
	printf("----------------------- \n");

	printf("%d %d %d \n", *&a, *&b, *&c);
	printf("%d %d %d \n", *ap[0], *ap[1], *ap[2]);
	printf("%d %d %d \n", **(ap + 0), **(ap + 1), **(ap + 2));

	return 0;

}

//
// 
// 5행에서 길이가 3인 포인터 배열을 선언한다. 7행부터 9행까지의 포인터 배열이므로 ap[0]에 a의 주소(&a)를 저장하고,
// ap[1]에 b의 주소(&b)를 저장하고, ap[2]에 c의 주소(&c)를 저장한다.
// 
// 11행부터 13행까지에서 변수 a의 주소(&a), b의 주소(&b), c의 주소(&c)를 출력한다. ap[i]==*(ap+i)가 성립이 된다.
// 16행부터 18행까지에서 이전 코드에서 * 연산자를 이용하여 주소에 저장된 값을 출력한다.
// 특이한 점은 18행에 * 연산자가 두 개 사용되었다. *(ap+i)는 주소이기 때문에 * 연산자가 한 개 더 필요하다.
// 
// 
//