#include <stdio.h>
int main() {
	int array[3] = { 10,20,30 };

	int* p = NULL;

	p = array;								// p=&array[0]; 포인터 변수에 배열의 시작 주소를 저장

	printf("%x %x %x \n", p, p + 0, p[0]);	// 배열의 0번 요소의 주소
	printf("%x %x \n", p + 1, &p[0]);		// 배열의 1번 요소의 주소
	printf("%x %x \n", p + 2, &p[2]);		// 배열의 2번 요소의 주소

	return 0;
}

//
// 
// 포인터 변수를 통한 1차원 배열 요소의 주소 접근
// 
// 
// 
// 
// 이번 절에서 포인터 변수를 통해서 1차원 배열 요소들의 주소에 접근하는 방법을 배운다.
// 간단한 방법은 포인터 변수에 배열의 시작 주소를 저장하는 방법으로 가능하다.
//
// 
// 7행에서 포인터 변수 p에 배열의 시작 주소 array를 저장하고 있다. 따라서 포인터 변수 p는
// 지금부터 배열의 주소를 저장하고 있어서 배열처럼 사용할 수 있다.
// 
// 
// 9행에서 p의 의미는 p에 저장된 주소, p+0의 의미는 p에서 0만큼 증가된 주소, &p[0]은 p+0과
// 같은 표현이다. 배열의 0번 요소의 주소를 출력한다.
// 
// 
// 10행에서 p+1의 의미는 p에서 1만큼 증가된 주소, 즉 p에 저장된 주소는 int형이므로  +1 4바이트
// 증가하라는 의미가 된다. &p[1], p+1과 같은 표현입니다.
// 
// 
// 11행에서 p+2의 의미는 p에서 2만큼 증가된 주소, 즉 p에서 저장된 주소는 int형이므로 +2는 8바이트 증가하라는
// 의미가 된다. &p[2]는 p+2와 같은 표현입니다.
// 
// 
// 
//
