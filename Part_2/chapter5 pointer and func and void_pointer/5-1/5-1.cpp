#include<stdio.h>

int func(int i);

void main() {
	int a = 10;
	int result = 0;

	result = func(a);
	printf("%d \n", result);
	printf("%d \n", a);

}

int func(int i) {
	i += 1;
	return i;
}

//
// 
// 
// 5.1 값에 의한 호출과 주소에 의한 호출
// 
// 
// 이번 절에서는 주소에 의한 호출 (Call By reference)을 새롭게 배우게 된다.
// 이 방식은 주소에 참조해서 함수를 호출하게 된다.
// 
// 
//		값에 의한 호출: 변수(메모리 공간에 저장된 값)또는 값을 복사해서 함수 호출
//		주소에 의한 호출: 주소(메모리 공간의 주소)를 참조해서 함수 호출
// 
// 
// 
// 3행에서 출력 형태는 int이다. 해석하면 i를 입력받아서 func() 함수를 수행하고
// int형으로 출력하라는 의미이다.
// 
// 7, 8행에서 변수 a와 result를 생성하고, 10과 0으로 초기화한다.
// 
// 
// 10행에서 변수 a에는 10이 저장되어 있다. 변수 a의 값 10으로 15행의 func(int i)함수를 호출한다.
// 값에 의한 호출이다. 15행에서 변수 i가 생성되고, 변수 i에 변수 a의 값이 복사된다. 그래서 변수 i는
// 10을 저장하게 되고 변수 a와는 다른 메모리 공간을 갖게 된다.
// 
// 17행에서 변수 i의 값이 1만큼 커져서 11이 된다.
// 
// 18행에서 변수 i의 값은 호출된 영역으로 반환된다. 이때 func() ㅎ마수를 호출한 영역인 10행으로 반환된다.
// 변수 i의 값이 10행으로 반환된 후에 func() 함수는 종료되고 변수 i의 메모리 공간도 소멸된다.
// 
// 
// 11행과 12행에서 변수 result에 저장된 값 11과 변수 a에 저장된 값 10을 출력한다.
// 
// 
// 결론적으로 변수 a와 i는 서로 다른 메모리의 공간을 가져서 변수 i의 값(복사본)이 변경되어도 변수 a의 값에는 아무런
// 변화가 없다.
//