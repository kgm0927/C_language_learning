#include <stdio.h>
#include <stdlib.h>
int main(void) {
	
	int* p = NULL;
	p = (int*)malloc(4);

	if (p == NULL)
		printf("힙 영역에 동적 메모리 할당 실패 \n");

	*p = 10;
	printf("주소 : %x \n", p);
	printf("값 : %d \n", *p);

	free(p);
	p = NULL;

	return 0;
}



//
// 2행에서는 malloc() 함수와 free() 함수를 사용하기 위해서 헤더 파일 stdlib.h를 인클루드 한다.
// 
// 6행에서는 힙 영역에 4바이트 동적 메모리를 할당하고, 할당되 동적 메모리의 시작 주소를 (int*)으로
// 형변환하여 포인터 변수 p에 할당한다.
// 
// 
// 8행에서 만약 p에 저장된 값이 NULL이면 즉, 동적 메모리 할당할 공간이 없으면 메모리 할당에 실패했음을
// 알린다.
// 
// 11행에서 동적 메모리가 할당된 영역에 데이터 10을 저장한다.
// 
// 
// 12행과 13행에서 p에 저자오딘 주소를 출력하고, * 연산자를 이용하여 동적 메모리 할당 영역에 저장된 데이터를
// 출력한다.
// 
// 16행에서 동적 메모리 해제 후, 포인터 변수 p를 NULL로 초기화하고 있는데, 포인터 변수이기에 NULL 해 두는 것이 좋다.
// 
// 
// 
// 
//			동적 메모리 할당의 필요성
// 
// 
// 동적 메모리 할당은 컴파일 중이 아닌 런타임 중 즉, 실행 시간에 이루어지는 프로그래메가
// 동적 메모리 할당을 요구해서 동적 메모리 할당이 이루어지면 힙 영역에 메모리가 할당된다.
// 이렇게 힙 영역에 할당된 동적 메모리는 일반 변수가 아닌 포인터를 통해 접근할 수 있다.
// 
// 
// 
// 동적 메모리 할당이 필요한 이유는 무엇인가? 
// 
// 배열은 메모리를 할당하게 되면 배열이 선언된 함수나 프로그램이 종료될 때까지  그 영역을 해제할 수 없다.
// 즉, 고정된 메모리를 할당받게 되는데 이때 배열이 갖는 단점은 크게 세 가지이다.
// 
// 
// 
// 
// 1. 선언된 배열 요소의 수가 사용된 요소 수보다 많은 경우 '메모리 낭비' 발생
// 
// int array[5];							// 선언된 배열의 요소 수: 5개(20Byte)
// array[0]=10, array[1]=20, array[2]=30	// 사용된 배열 요소 수: 3개(12Byte)
// 
// 
// 
// 2. 선언된 배열 요소의 수가 사용된 요소의 수보다 적은 경우 메모리 부족 에러 발생
// 
// int array[5];								// 선언된 배열 요소 수: 2개(8Byte)
// array[0]=10, array[1]=20, array[2]=30		// 사용된 배열 요소 수: 3개(12Byte)
// 
// 
// 
// 3. 배열 선언 시 배열 길이에 변수를 설정한 경우 에러 발생(반드시 상수를 사용해야 함)
// 
// int a=5;
// int array[a]; // 배열 선언 시 변수 a를 배열 길이로 사용
// 
// 
// void init(int a)
// {
// int array[a];		// 배열 선언 시 함수의 인자(지역 변수) a를 배열 길이로 사용
// 
// 
//			}
// 
// 
// 
// 그러면 배열의 요소를 변수로 사용되는 경우는 어떤 경우인가? 배열을 선언한 후 일 뿐이다. 배열의
// 요소 값을 바꾸기 위한 변수는 사용해도 되는데, 다음과 같이 밑의 반복문에서 사용되는 배열의
// 요소 i 값은 변수이다. i 값은 배열의 선언 이후에 사용되는 변수이기 때문에 정상이다.
// 
// int main(void){
//		int array[5]=0;
//		int i=0;
//		for(i=0; i<5;i++){
// 
//		array[i]=1;	// 배열 이름 array가 선언된 후, 변수 i 사용(정상)
// }
// 
// 
// 
// 종합하면  프로그래머가 필요한 메모리 크기를 알 수가 없을 때, 동적 메모리 할당을 사용한다. 그리고 이를
// 지원하는 영역이 힙 영역이다. 힙 영역에 동적 메모리 할당을 하면 필요한 시점에 필요한 만큼 메모리를 할당할 수
// 있고 할당받은 메모리의 시작 주소를 포인터로 저장할 수 있다.
// 
// 
// 
// 
// 종류				|			함수						|		성공			| 실패
// -------------------------------------------------------------------------------------------
// 메모리 할당 함수 |		#include <stdlib.h>				| 할당된 메모리의 시작	|NULL
//					|	void* malloc (size_t size)			| 주소 반환				|반환
// --------------------------------------------------------------------------------------------
// 메모리 할당 함수	|	#include <stdlib.h>					| 할당된 메모리의 시작  |NULL
//					|	void* calloc(size_t num,size_t size)| 주소 반환				|반환
//---------------------------------------------------------------------------------------------
// 메모리 할당 함수 |	#include <stdlib.h>					| 재할당된 메모리의 시작| NULL
//					| void* realloc(void* p,size_t size)	| 주소 반환				| 반환
// --------------------------------------------------------------------------------------------
// 메모리 해제 함수 |	#include <stdlib.h>					| 할당된 메모리 해제	|
//						void free(void *p)					|
// 
// 
// 
// 
// 동적 메모리 할당 함수와 해제 함수는 헤더 파일 stdlib.h에 선언되어 있다. C 프로그램에서 런타임 시
// 힙 영역에 동적 메모리를 할당하기 위해 malloc(), calloc(), realloc() 함수를 사용하고, 할당된
// 메모리를 해제하기 위해 free() 함수를 사용한다.
// 
// 
// 
// 
//	
// 
// 
//			4.2 동적 메모리 할당 함수, 해제 함수 그리고 가변 인자
// 
// 
// malloc() 함수와 free() 함수
// 
// 
// 힙 영역에 동적 메모리를 할당하고 해제하기 위해 주소 사용하는 함수가 malloc() 함수와 
// free() 함수이다.
// 
// 
// 
// 
// 
// #include <stdio.h>
//		void* malloc(size_t size);	// 동적 메모리 할당 함수
//		void free(void* p);			// 동적 메모리 해제 함수
// 
// 
// 
// 
// 
// 
// malloc() 함수는 호출 성공 시 메모리의 시작 주소를 반환하고 호출 실패시 NULL를 반환한다.
// free() 함수는 malloc() 함수를 통해 동적 메모리가 할당되 공간을 해제한다.
// 
// 
// 동적 메모리 할당 함수 malloc()은 입력 형태가 size_t size이며 출력 형태는 void* 이다.
// malloc() 함수의 입력 형태에서 사용된 'size_t'는 typedef로 재정의 해서 만들어진 사용자 정의
// 자료형이다. 
// 
// size_t는 unsigned int 나 unsigned long 형으로 선언되어 있다. 따라서 size_t size는 unsigned int size 또는
// unsigned long size와 같은 표현이다. 즉, malloc() 함수를 호출할 때 입력 인자로 0보다 큰 정수를 입력한다.
// 
// 
// 
// 
// 
// 다음으로 malloc() 함수의 출력 형태는 void*으로 void 형 포인터이다. malloc()함수는 힙 영역 동적 메모리를 할당한
// 후 할당된 메모리의 시작 주소를 반환하는데 void형 주소이다. 다시 말해 malloc() 함수는 주소를 반환할 때 반환되는
// 주소 값은 어떤 자료형의 주소인지 결정하지 못한다. 그래서 malloc() 함수는 void 형 주소를 반환하고, 프로그래머가 필요한
// 자료형으로 알아서 '형변환'해서 사용하라고 한다.
// 
// 
// 
// int main(void){
//	int*p=NULL;
//	p=(int*)malloc(4);
//	return 0;
// }
// 
// 
// 위의 예문에서 malloc(4)를 통해 4바이트 크기를 힙 영역에 할당한 후 할당한 메모리 공간의 시작 주소를 밑줄 친(int*)주소로 형변환한다.
// 그런 다음 p에 (int*)으로 형변환된 malloc(4)의 시작 주소를 저장한다.
// 
// 동적 메모리 해제 함수 free() 함수는 힙 영역에 할당된 동적 메모리를 해제한다. 할당된 동적 메모리를 해제하지 않으면 그만큼의 메모리가
// 낭비하게 되는데 이런 문제를 해결해 주는 함수가 free() 함수이다.
//

