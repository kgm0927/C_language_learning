#include <stdio.h>
#include <stdarg.h>
void add(int num, ...);	// 가변 인자 함수 선언

int main(void) {
	
	int a = 10, b = 20, c = 30;

	add(1, a);
	add(2, a, b);
	add(3, a, b, c);
	return 0;
}

void add(int num, ...)
{
	va_list p;
	va_start(p, num);
	int sum = 0;


	for (int i = 0; i < num; i++) {
		sum += va_arg(p, int);
	}

	printf("%d \n", sum);

	va_end(p);

}
//
// 
// 기존의 방법으로는 사용을 할 수가 없다. 그러므로 다른 방법을 통해 이를 해결하도록 하겠다.
// 
// 
// 먼저 #include를 통해 헤더파일 stdarg.h파일을 실행한다. 여기서 우리는 4가지 매크로를 사용해야 할 것이다.
// 
// 
// va_list: 가변 인수 목록을 나타내는 타입입니다. 이 타입으로 가변 인수를 저장하고 접근합니다.

// va_start: 가변 인수 목록을 사용하기 전에 초기화하는 매크로입니다.va_list 변수와 마지막 고정 인수를 인자로 받습니다.

// va_arg : 가변 인수 목록에서 값을 읽어오는 매크로입니다.값을 읽어올 데이터 타입과 va_list 변수를 인자로 받습니다.

// va_end : 가변 인수 처리가 끝났을 때 호출하여 정리하는 매크로입니다.va_list 변수를 인자로 받습니다.
// 
// <stdarg.h> 헤더파일은 C 표준 라이브러리에 포함되어 있으며, 가변 인수를 처리해야 하는 함수를
// 작성할 때 유용하게 사용된다.
// 
// 
// 17행에서 va_list를 매크로로 포인터 배열을 만든다. 이는 char 포인터 배열이다.
// 그리고 'va_start'를 통해 가변 인수 목록을 초기화하는데 va_list 변수와 고정 인수(num)를
// 인자로 받는다(참고로 va_list 변수는 직접 배열에 정수 값을 입력해서 값을 찾는 것이 불가능하다). 
// 
// 
// 다음 반복문을 통해 va_arg를 이용해서 가변 인수 목록에서 값을 읽어와야 한다. 하지만 va_arg에 저장되어 있는
// 내용의 자료형은 char 이기 때문에 반드시 int나 다른 자료형으로 변경해야 한다.
// 
// 마지막으로 'va_end'으로 가변 인수 처리가 끝났을 때 호출하여 정리한다.
// va_list변수를 인자로 받는다.
//