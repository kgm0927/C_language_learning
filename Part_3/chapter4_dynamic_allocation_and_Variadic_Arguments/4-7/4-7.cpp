#include <stdio.h>
#include <stdlib.h>
int main(void) {
	
	int i = 0;

	int* p = (int*)malloc(sizeof(int) * 2);	// 8바이트 동적 메모리 할당
	p[0] = 10;
	p[1] = 20;

	p = (int*)realloc(p, sizeof(int) * 1);	// 4바이트이므로 재할당 (이전보다 4바이트 축소됨.)
	p[0] = 30;

	for (i = 0; i < 2; i++)
		printf("p[%d] : %d \n", i, p[i]);

	free(p);
	p = NULL;


	return 0;
}

//
// 
// 7행에서 malloc() 함수를 잉요하여 힙 영역에 8바이트 동적 메모리를 할당한다. 8, 9행에서
// p[0]에 10을 저장하고, p[1]에 20을 저장해서 8바이트 동적 메모리에 데이터를 넣는다.
// 
// 
// 11행에서는 realloc() 함수를 사용해서 기존의 8바이트를 4바이트로 재할당한다. 이전보다
// 4바이트만큼 메모리가 축소되었다.
// 
// 
// 12행에서는 8바이트가 4바이트로 축소되어 p[1]는 사용할 수 없게 되고 p[0]에만 저장할 수 있다.
// 실행 결과를 보면 p[1]이 쓰레기 값이 출력되는지 짐작할 수 있다.
// 
// 
// 마지막으로 정리를 하자면 코드, 스택, 데이터 영역은 메모리가 언제 할당되고 해제될지 그리고
// 얼마나 할당되는지에 대한 크기를 컴파일 중에 결정되는 메모리 영역이다.
// 컴파일 중에 결정되기 때문에 메모리 관리를 컴파일러가 책임진다.
// 
// 반면에 '동적 메모리 할당'에 사용되는 '힙 영역'은 메모리가 언제 할당되고 해제될 지 그리고 얼마나
// 할당될지에 대한 크기를 런타임 중에 결정되는 메모리 영역이다. 따라서 프로그래머가 메모리 관리를 책임진다.
// 
//