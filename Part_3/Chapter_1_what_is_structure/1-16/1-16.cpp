#include <stdio.h>

struct point
{
	int* x;
	int** y;
};

int main(void) {
	
	int num1 = 3;
	struct point p1;

	p1.x = &num1;
	p1.y = &p1.x;

	printf("%d %d %d \n", num1, *p1.x, **p1.y);

	return 0;
}

//
// 
// 다음은 멤버 변수로 다차원 포인터를 사용하는 경우이다. 1차원 포인터 변수 x는 일반 변수의 주소를
// 저장할 수 있고, 2차원 포인터 변수 y는 1차원 포인터 변수의 주소를 저장할 수 있다.
// 
// 
// 5행과 6행의 1차원 포인터 변수 x와 차원 포인터 변수 y를 멤버 변수로 선언한다.
// 
// 14행에서 구조체 변수 p1과 .연산자를 통해 p1.x에 &num1(변수 num1의 주소)을 저장한다. 
// 
// 15행에서 구조체 변수 p1과, .연산자를 통해 p1.y에 &p1.x(p1.x의 시작 주소)를 저장한다. p1.y는
// 2차원 포인터 변수이기 때문에 1차원 포인터 변수의 주소를 저장해야 한다. 따라서 p1.y=&p1.x는 올바른
// 표현이다.
// 
// 
// 17행에서 p1.x는 * 연산자 한 개를 사용하여 변수 num1의 값에 접근할 수 있고, p1.y는 * 연산자를 두 개
// 사용하여 변수 num1의 값에 접근할 수 있다. Part2에서 배운 다차원 포인터의 변수 개념과 다르지 않다.
//